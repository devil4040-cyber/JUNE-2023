//Question -1

#include <stdio.h>

void printExponent(double num) {
    unsigned long long exponent;
    unsigned long long mask = 0x7FF0000000000000;
    unsigned long long shiftedExponent;
    
    unsigned char *bytePtr = (unsigned char *)&num;
    unsigned int byteSize = sizeof(num);
    
    // Copy the exponent bytes into the exponent variable
    for (int i = 0; i < byteSize; i++) {
        exponent = (exponent << 8) | bytePtr[i];
    }
    
    // Shift and mask to extract the exponent bits
    shiftedExponent = (exponent & mask) >> 52;
    
    printf("Exponent in Hexadecimal: 0x%llx\n", shiftedExponent);
    
    printf("Exponent in Binary: 0b");
    for (int i = 10; i >= 0; i--) {
        printf("%d", (shiftedExponent >> i) & 1);
    }
    printf("\n");
}

int main() {
    double x = 0.7;
    
    printExponent(x);
    
    return 0;
}

//Question -2

#include <stdio.h>

void swap(void *ptr1, void *ptr2) {
    // Typecast the pointers to char pointers
    char *charPtr1 = (char *)ptr1;
    char *charPtr2 = (char *)ptr2;
    
    // Swap the data byte by byte
    while (*charPtr1 && *charPtr2) {
        char temp = *charPtr1;
        *charPtr1 = *charPtr2;
        *charPtr2 = temp;
        
        charPtr1++;
        charPtr2++;
    }
}

int main() {
    int a = 10;
    int b = 20;
    
    printf("Before swap: a = %d, b = %d\n", a, b);
    
    // Swap integers
    swap(&a, &b);
    
    printf("After swap: a = %d, b = %d\n", a, b);
    
    float x = 3.14;
    float y = 2.71;
    
    printf("Before swap: x = %.2f, y = %.2f\n", x, y);
    
    // Swap floats
    swap(&x, &y);
    
    printf("After swap: x = %.2f, y = %.2f\n", x, y);
    
    return 0;
}

//Question -3

#include <stdio.h>

int sumAlternateElements(int arr[], int size) {
    int sum = 0;
    
    for (int i = 0; i < size; i += 2) {
        sum += arr[i];
    }
    
    return sum;
}

int main() {
    int a[] = {10, 30, 50};
    int size = sizeof(a) / sizeof(a[0]);
    
    int result = sumAlternateElements(a, size);
    
    printf("Sum of alternate elements: %d\n", result);
    
    return 0;
}

//Question -4

#include <stdio.h>

int countSetBits(int arr[], int size) {
    int totalBits = 0;
    
    for (int i = 0; i < size; i++) {
        int num = arr[i];
        int count = 0;
        
        while (num > 0) {
            if (num & 1) {
                count++;
            }
            
            num >>= 1;
        }
        
        totalBits += count;
    }
    
    return totalBits;
}

int main() {
    int a[] = {0x01, 0xF4, 0x10001};
    int size = sizeof(a) / sizeof(a[0]);
    
    int result = countSetBits(a, size);
    
    printf("Total number of set bits: %d\n", result);
    
    return 0;
}

