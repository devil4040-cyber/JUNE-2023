//Question -1
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int rollNo;
    char name[20];
    float marks;
} Student;

void initializeArrayFromString(const char *input, Student **students, int *size) {
    // Allocate memory for the array of structures
    *students = NULL;
    *size = 0;

    char *data = strdup(input);
    char *token = strtok(data, " \n");

    while (token) {
        *students = realloc(*students, (*size + 1) * sizeof(Student));

        if (*students == NULL) {
            printf("Memory allocation failed. Exiting...\n");
            free(data);
            *size = 0;
            return;
        }

        (*students)[*size].rollNo = atoi(token);

        token = strtok(NULL, " \n");
        strncpy((*students)[*size].name, token, sizeof((*students)[*size].name));

        token = strtok(NULL, " \n");
        (*students)[*size].marks = atof(token);

        (*size)++;
        token = strtok(NULL, " \n");
    }

    free(data);
}

int main() {
    const char *input = "1001 Aron 100.00\n1002 Bob 95.50\n1003 Claire 88.75\n";

    Student *students;
    int size;

    initializeArrayFromString(input, &students, &size);

    // Display the initialized array of structures
    printf("Initialized Array of Structures:\n");
    for (int i = 0; i < size; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollNo);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("\n");
    }

    // Free the allocated memory
    free(students);

    return 0;
}

//Question -2
#include <stdio.h>

typedef struct {
    int rollNo;
    char name[20];
    float marks;
} Student;

void initializeArray(Student *students, int size) {
    for (int i = 0; i < size; i++) {
        printf("Enter details for student %d:\n", i + 1);
        
        printf("Roll No: ");
        scanf("%d", &students[i].rollNo);

        printf("Name: ");
        scanf("%s", students[i].name);

        printf("Marks: ");
        scanf("%f", &students[i].marks);

        printf("\n");
    }
}

int main() {
    int size;
    printf("Enter the number of students: ");
    scanf("%d", &size);

    Student students[size];

    initializeArray(students, size);

    printf("\nInitialized Array of Structures:\n");
    for (int i = 0; i < size; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollNo);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("\n");
    }

    return 0;
}
//Questions -3

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int rollNo;
    char name[20];
    float marks;
} Student;

void displayArray(const Student *students, int size) {
    printf("Array of Structures:\n");
    for (int i = 0; i < size; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollNo);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("\n");
    }
}

int main() {
    int size;
    printf("Enter the number of students: ");
    scanf("%d", &size);

    Student *students = (Student *)malloc(size * sizeof(Student));
    if (students == NULL) {
        printf("Memory allocation failed. Exiting...\n");
        return 1;
    }

    // Initialize the array of structures
    for (int i = 0; i < size; i++) {
        printf("Enter details for student %d:\n", i + 1);
        
        printf("Roll No: ");
        scanf("%d", &students[i].rollNo);

        printf("Name: ");
        scanf("%s", students[i].name);

        printf("Marks: ");
        scanf("%f", &students[i].marks);

        printf("\n");
    }

    // Display the array of structures
    displayArray(students, size);

    // Free the allocated memory
    free(students);

    return 0;
}
//Questions -4

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int rollNo;
    char name[20];
    float marks;
} Student;

void displayArray(const Student *students, int size) {
    printf("Array of Structures:\n");
    for (int i = 0; i < size; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollNo);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("\n");
    }
}

int compareDescending(const void *a, const void *b) {
    const Student *studentA = (const Student *)a;
    const Student *studentB = (const Student *)b;

    if (studentA->marks > studentB->marks)
        return -1;
    else if (studentA->marks < studentB->marks)
        return 1;
    else
        return 0;
}

void sortArray(Student *students, int size) {
    qsort(students, size, sizeof(Student), compareDescending);
}

int searchArray(const Student *students, int size, const char *name) {
    for (int i = 0; i < size; i++) {
        if (strcmp(students[i].name, name) == 0)
            return i;
    }
    return -1;
}

int main() {
    int size;
    printf("Enter the number of students: ");
    scanf("%d", &size);

    Student *students = (Student *)malloc(size * sizeof(Student));
    if (students == NULL) {
        printf("Memory allocation failed. Exiting...\n");
        return 1;
    }

    // Initialize the array of structures
    for (int i = 0; i < size; i++) {
        printf("Enter details for student %d:\n", i + 1);
        
        printf("Roll No: ");
        scanf("%d", &students[i].rollNo);

        printf("Name: ");
        scanf("%s", students[i].name);

        printf("Marks: ");
        scanf("%f", &students[i].marks);

        printf("\n");
    }

    // Sort the array of structures in descending order based on marks
    sortArray(students, size);

    // Display the sorted array
    printf("\nSorted Array of Structures (Descending order of marks):\n");
    displayArray(students, size);

    // Search operation based on the name of the student
    char searchName[20];
    printf("Enter the name to search: ");
    scanf("%s", searchName);

    int foundIndex = searchArray(students, size, searchName);
    if (foundIndex != -1) {
        printf("\nStudent found at index %d:\n", foundIndex);
        printf("Roll No: %d\n", students[foundIndex].rollNo);
        printf("Name: %s\n", students[foundIndex].name);
        printf("Marks: %.2f\n", students[foundIndex].marks);
    } else {
        printf("\nStudent not found.\n");
    }

    // Free the allocated memory
    free(students);

    return 0;
}

